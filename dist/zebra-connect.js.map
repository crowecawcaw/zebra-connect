{"version":3,"file":"zebra-connect.js","sources":["../node_modules/unfetch/dist/unfetch.es.js","../src/index.js"],"sourcesContent":["var index = typeof fetch=='function' ? fetch.bind() : function(url, options) {\n\toptions = options || {};\n\treturn new Promise( function (resolve, reject) {\n\t\tvar request = new XMLHttpRequest();\n\n\t\trequest.open(options.method || 'get', url);\n\n\t\tfor (var i in options.headers) {\n\t\t\trequest.setRequestHeader(i, options.headers[i]);\n\t\t}\n\n\t\trequest.withCredentials = options.credentials=='include';\n\n\t\trequest.onload = function () {\n\t\t\tresolve(response());\n\t\t};\n\n\t\trequest.onerror = reject;\n\n\t\trequest.send(options.body);\n\n\t\tfunction response() {\n\t\t\tvar keys = [],\n\t\t\t\tall = [],\n\t\t\t\theaders = {},\n\t\t\t\theader;\n\n\t\t\trequest.getAllResponseHeaders().replace(/^(.*?):\\s*([\\s\\S]*?)$/gm, function (m, key, value) {\n\t\t\t\tkeys.push(key = key.toLowerCase());\n\t\t\t\tall.push([key, value]);\n\t\t\t\theader = headers[key];\n\t\t\t\theaders[key] = header ? (header + \",\" + value) : value;\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\tok: (request.status/200|0) == 1,\t\t// 200-299\n\t\t\t\tstatus: request.status,\n\t\t\t\tstatusText: request.statusText,\n\t\t\t\turl: request.responseURL,\n\t\t\t\tclone: response,\n\t\t\t\ttext: function () { return Promise.resolve(request.responseText); },\n\t\t\t\tjson: function () { return Promise.resolve(request.responseText).then(JSON.parse); },\n\t\t\t\tblob: function () { return Promise.resolve(new Blob([request.response])); },\n\t\t\t\theaders: {\n\t\t\t\t\tkeys: function () { return keys; },\n\t\t\t\t\tentries: function () { return all; },\n\t\t\t\t\tget: function (n) { return headers[n.toLowerCase()]; },\n\t\t\t\t\thas: function (n) { return n.toLowerCase() in headers; }\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t});\n};\n\nexport default index;\n//# sourceMappingURL=unfetch.es.js.map\n","import fetch from 'unfetch'\n\nexport class Server {\n  constructor(url) {\n    this.url = url\n    this.getDefaultPrinter = this.getDefaultPrinter.bind(this)\n    this.getAllPrinters = this.getAllPrinters.bind(this)\n  }\n\n  getDefaultPrinter() {\n    return fetch(`${this.url}/default?type=printer`)\n      .then(res => {\n        if (res.status >= 200 && res.status < 300) return res.json()\n        else return Promise.reject(res.status)\n      })\n      .then(defaultPrinter => new Printer(this.url, defaultPrinter))\n  }\n\n  getAllPrinters() {\n    return fetch(`${this.url}/available`)\n      .then(res => {\n        if (res.status >= 200 && res.status < 300) return res.json()\n        else return Promise.reject(res.status)\n      })\n      .then(available =>\n        available.printer.map(p => new Printer({url: this.url, device: p}))\n      )\n  }\n}\n\nexport class Printer {\n  constructor({url, device}) {\n    this.url = url\n    this.name = device.name\n    this.uid = device.uid\n    this.device = device\n  }\n\n  // method to POST commands to the printer\n  post(url, body) {\n    return fetch(`${this.url}${url}`, {\n      method: 'POST',\n      body: JSON.stringify(body)\n    }).then(res => {\n      if (res.status >= 200 && res.status < 300) return res.json()\n      else return Promise.reject(res.status)\n    })\n  }\n\n  // read command\n  read() {\n    return this.post('/read', {device: this.device})\n  }\n\n  // write command\n  write(data) {\n    this.post('/write', {device: this.device, data: data})\n  }\n\n  //prints zpl code to the printer\n  print(zpl) {\n    return this.write(zpl)\n  }\n\n  save() {\n    return {url: this.url, device: this.device}\n  }\n}\n"],"names":["index","fetch","bind","url","options","Promise","resolve","reject","request","XMLHttpRequest","i","open","method","headers","setRequestHeader","response","header","keys","all","getAllResponseHeaders","replace","m","key","value","push","toLowerCase","ok","status","statusText","responseURL","clone","text","responseText","json","then","JSON","parse","blob","Blob","entries","get","n","has","withCredentials","credentials","onload","onerror","send","body","Server","getDefaultPrinter","this","getAllPrinters","res","defaultPrinter","Printer","available","printer","map","p","ref","device","name","uid","post","stringify","read","write","data","print","zpl","save"],"mappings":"AAAA,IAAIA,EAAsB,mBAAPC,MAAoBA,MAAMC,OAAS,SAASC,EAAKC,GAEnE,OADAA,EAAUA,MACH,IAAIC,QAAS,SAAUC,EAASC,GACtC,IAAIC,EAAU,IAAIC,eAIlB,IAAK,IAAIC,KAFTF,EAAQG,KAAKP,EAAQQ,QAAU,MAAOT,GAExBC,EAAQS,QACrBL,EAAQM,iBAAiBJ,EAAGN,EAAQS,QAAQH,IAa7C,SAASK,IACR,IAGCC,EAHGC,KACHC,KACAL,KAUD,OAPAL,EAAQW,wBAAwBC,QAAQ,0BAA2B,SAAUC,EAAGC,EAAKC,GACpFN,EAAKO,KAAKF,EAAMA,EAAIG,eACpBP,EAAIM,MAAMF,EAAKC,IAEfV,EAAQS,IADRN,EAASH,EAAQS,IACQN,EAAS,IAAMO,EAASA,KAIjDG,GAA8B,IAAzBlB,EAAQmB,OAAO,IAAI,GACxBA,OAAQnB,EAAQmB,OAChBC,WAAYpB,EAAQoB,WACpBzB,IAAKK,EAAQqB,YACbC,MAAOf,EACPgB,KAAM,WAAc,OAAO1B,QAAQC,QAAQE,EAAQwB,eACnDC,KAAM,WAAc,OAAO5B,QAAQC,QAAQE,EAAQwB,cAAcE,KAAKC,KAAKC,QAC3EC,KAAM,WAAc,OAAOhC,QAAQC,QAAQ,IAAIgC,MAAM9B,EAAQO,aAC7DF,SACCI,KAAM,WAAc,OAAOA,GAC3BsB,QAAS,WAAc,OAAOrB,GAC9BsB,IAAK,SAAUC,GAAK,OAAO5B,EAAQ4B,EAAEhB,gBACrCiB,IAAK,SAAUD,GAAK,OAAOA,EAAEhB,gBAAiBZ,KApCjDL,EAAQmC,gBAAuC,WAArBvC,EAAQwC,YAElCpC,EAAQqC,OAAS,WAChBvC,EAAQS,MAGTP,EAAQsC,QAAUvC,EAElBC,EAAQuC,KAAK3C,EAAQ4C,SCjBVC,EACX,SAAY9C,QACLA,IAAMA,OACN+C,kBAAoBC,KAAKD,kBAAkBhD,KAAKiD,WAChDC,eAAiBD,KAAKC,eAAelD,KAAKiD,mBAGjDD,+CACSjD,EAASkD,kCACbjB,cAAKmB,UACAA,EAAI1B,QAAU,KAAO0B,EAAI1B,OAAS,IAAY0B,EAAIpB,OAC1C5B,QAAQE,OAAO8C,EAAI1B,UAEhCO,cAAKoB,UAAkB,IAAIC,EAAQJ,EAAKhD,IAAKmD,kBAGlDF,4CACSnD,EAASkD,uBACbjB,cAAKmB,UACAA,EAAI1B,QAAU,KAAO0B,EAAI1B,OAAS,IAAY0B,EAAIpB,OAC1C5B,QAAQE,OAAO8C,EAAI1B,UAEhCO,cAAKsB,UACJA,EAAUC,QAAQC,aAAIC,UAAK,IAAIJ,OAAcJ,EAAKhD,WAAawD,SAKvE,IAAaJ,EACX,SAAYK,OAAMC,gBACX1D,eACA2D,KAAOD,EAAOC,UACdC,IAAMF,EAAOE,SACbF,OAASA,eAIhBG,cAAK7D,EAAK6C,UACD/C,KAASkD,SAAWhD,UACjB,YACFgC,KAAK8B,UAAUjB,KACpBd,cAAKmB,UACFA,EAAI1B,QAAU,KAAO0B,EAAI1B,OAAS,IAAY0B,EAAIpB,OAC1C5B,QAAQE,OAAO8C,EAAI1B,uBAKnCuC,uBACSf,KAAKa,KAAK,gBAAkBb,KAAKU,sBAI1CM,eAAMC,QACCJ,KAAK,iBAAmBb,KAAKU,YAAcO,iBAIlDC,eAAMC,UACGnB,KAAKgB,MAAMG,gBAGpBC,2BACepB,KAAKhD,WAAagD,KAAKU"}